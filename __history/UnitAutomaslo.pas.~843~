unit UnitAutomaslo;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, SQLiteTable3,
  Vcl.ComCtrls;

const
FileSeparator = ';';
FileQuotes='"';

Brands : array [1..9] of WideString = ('AGIP','AGRINOL','АГРИНОЛ', 'ARAL','BP','CASTROL','ELF','FUCHS TITAN','HONDA');

Header_Size = 70;
Export_Header : array [1..Header_size] of WideString =
('Категория','Товар','Поисковые метки','Цена','Цена оптовая',
'Адрес','Видим','Рекомендуемый','Бренд','Вариант',
'Старая цена','Артикул','Склад','Заголовок страницы','Ключевые слова',
'Описание страницы','Аннотация','Описание','Изображения','Производитель',
'Емкость','Тип масла','Тип двигателя','SAE (Вязкость)','Применение',
'ACEA','API','ILSAC','DEXTRON','JASO',
'ISO','CCMC','CIK-FIA','NMMA','Класс вязкости',
'Тип фильтра','Функция','Модель','Высота H1 (mm)','Высота H2 (mm)',
'Диаметр внешний OD1 (mm)','Диаметр внешний OD2 (mm)','Диаметр внутренний ID1 (mm)','Диаметр внутренний ID2 (mm)','Резьба (?)',
'Нижняя резьба (?)','Наруж. диаметр прокладки OD2 (mm)','Внутр. диаметр прокладки ID2 (mm)','Тип колодки','Передний/Задний',
'Тип диска','Кол-во отверстий','Диаметр (mm) ','Диаметр фаски (mm)','Длина L1 (mm)',
'Длина L2 (mm)','Ширина W1 (mm)','Ширина W2 (mm)','Толщина (мм)','Высота (mm)',
'Тип радиатора','Модель автомобиля','Размеры радиатора (mm)','Впускной диаметр (mm)','Выпускной диаметр (mm)',
'Впускной диаметр (?)','Выпускной диаметр (?)','Комплект (шт)','Материал','Примечание');

Annotation_text_header = '<p><img src=/files/uploads/oil-cange.jpg width="179" height="130"/><img src=/files/uploads/104967w640_h640.jpg width="293" height="130" /></p><p><span style="font-family: arial, helvetica, sans-serif;"><strong><span style="font-size: small;">';
Annotation_text_footer = '</span></strong></span></p>';

//Row_size=11;
//My_Rows :array [1..Row_size] of WideString = ('Категория','Товар','Видим','Вариант', 'Описание страницы',
//                  'Аннотация','Описание','Изображения','Производитель','Тип масла','SAE (Вязкость)');
type ExportRows=record
Empty, Category, Item, variant,  Description, images, ShortImage,  Vendor:widestring;
Model, Brand, Oil_type, SAE, Page_description, Annotation:WideString;
Visible:WideString;
Position:integer;
end;

// Parsed_Export:array
{
   Категория   Category
   Товар       Item
   Видим       Visible
   Вариант     variant
   Аннотация   Short_description
   Описание    Full_description
   Изображения  images
   Производитель  Vendor
   Модель         Model   -- не обрабатывается
   Brand - торговая марка не обрабатывается
   Тип масла      Oil_type
   SAE (Вязкость)  SAE
}

type
  TFormAutoMaslo = class(TForm)
    BitBtnClose: TBitBtn;
    BitBtnStart: TBitBtn;
    OpenDialog1: TOpenDialog;
    MemoHtml: TMemo;
    MemoCodes: TMemo;
    BitBtnSave: TBitBtn;
    SaveDialog1: TSaveDialog;
    PB: TProgressBar;
    MemoSQL: TMemo;
    procedure BitBtnStartClick(Sender: TObject);
    procedure BitBtnSaveClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    function ReplaceCapitals(const Str:WideString):WideString;
    function SaveFirstTab(const Str: widestring): WideString;
    function SaveQuotedTab(const Str: widestring):WideString;
    function SavePlainTab(const Str: widestring): WideString;
  public

    //ExportArray:array of ExportRows;
    //ExportArray_Size:integer;
    function CopyBySample(const SearchStr, SampleBegin, SampleEnd:WideString):Widestring;
    //procedure AddRowToArray(NewRow:ExportRows);
    procedure InitRow(Row:ExportRows);
  end;

var
  FormAutoMaslo: TFormAutoMaslo;

implementation

{$R *.dfm}

uses System.WideStrUtils;

procedure TFormAutoMaslo.InitRow(Row: ExportRows);
begin
with Row do
  begin
  Empty:='';
  Visible:='';
  Category:='';
  Item:='';
  variant:='';
  position:=0;
  images:='';
  ShortImage:='';
  Vendor:='';
  Model:='';
  Brand:='';
  Oil_type:='';
  SAE:='';
  Description:='';
  Annotation:='';
  Page_Description:='';
  end;
end;

procedure TFormAutoMaslo.BitBtnStartClick(Sender: TObject);
var FName, FilesDir:WideString;
ParsedRow:ExportRows;
//FileStream:TFileStream;
//S:TStringStream;
i,j, where, offset, Desc_begin, Desc_End, Desc_Len, IFrame_begin, IFrame_end:integer;
ExportedFile, DirName:Widestring;
HeadingTitle, litraz, Img1, Img2,  Annotation:WideString;
Description:array of WideString;
Descr:WideString;
OutputStr:WideString;
sr:TSearchRec;
begin
if not OpenDialog1.Execute then exit;
//SetLength(ExportArray,0);
BitBtnSave.Enabled:=true;
PB.Position:=Pb.Min;
MemoHtml.Clear;
MemoCodes.Clear;
MemoSQL.Clear;
FName:=OpenDialog1.FileName;
FilesDir:=ExtractFileDir(FName);
PB.StepIt;
if FindFirst(FilesDir+'\*.html', FaAnyFile, sr)=0 then
  begin
  OutputStr:=Export_Header[1];
  for I := 2 to Header_Size do OutputStr:=OutputStr+FileSeparator+Export_Header[i];
  MemoCodes.Lines.Add(OutputStr);
  repeat
  OutputStr:='';
  InitRow(ParsedRow);
  MemoHtml.Clear;
  MemoHtml.Lines.LoadFromFile(FilesDir+'\'+sr.Name, TEncoding.UTF8);
  HeadingTitle:='';
  Litraz:='';
  Annotation:='';
  for I := 0 to MemoHtml.Lines.Count-1 do
      begin
      if Pos('<h1 class="heading_title">',MemoHtml.Lines[i])>0
        then
          begin
          HeadingTitle:=Uppercase(trim(CopyBySample(MemoHtml.Lines[i], '<span>','</span>')));
          if (Pos(',',HeadingTitle)>0) or (LastDelimiter('Л',HeadingTitle)>length(HeadingTitle)-2) then
          // варианты
          // 'title 4л'
          // 'title 4л.'
          // 'title, 4л.
          // 'title,4л'
          //вариант запятая - по ней копируем строку
          //Запятой нет, если есть Л или Л. то убираем Л, ищем последний пробел, котоырй является разделителем
            begin
            if (Pos(',',HeadingTitle)>0) then
              begin
              Litraz:=Trim(Copy(HeadingTitle,1+LastDelimiter(',',HeadingTitle), length(HeadingTitle)));
              HeadingTitle:=Trim(Copy(HeadingTitle,1, -1+LastDelimiter(',',HeadingTitle)));
              Litraz:='Объем '+trim(WideStringReplace(litraz,'Л.', 'Л',[rfReplaceAll]));
              end;
            if (LastDelimiter('Л',HeadingTitle)>length(HeadingTitle)-2) then
              begin
              Litraz:=Trim(Copy(HeadingTitle,1+LastDelimiter(' ',HeadingTitle), length(HeadingTitle)));
              HeadingTitle:=Trim(Copy(HeadingTitle,1, -1+LastDelimiter(' ',HeadingTitle)));
              Litraz:='Объем '+trim(WideStringReplace(litraz,'Л.', 'Л',[rfReplaceAll]));
              end;
            end;//
          end;//найшли heading title и litraz
      if Pos('<a itemprop="brand" content=',MemoHtml.Lines[i])>0
        then
          begin
          ParsedRow.Vendor:=Trim(CopyBySample(MemoHtml.Lines[i], 'content="','" href='));
          end;
      if Pos('<span>Модель:</span>',MemoHtml.Lines[i])>0
        then
          begin
          ParsedRow.Model:=Trim(CopyBySample(MemoHtml.Lines[i], '</span>','<br />'));
          end;
      if Pos('<div class="image">',MemoHtml.Lines[i])>0
        then
          begin
          Img1:=Trim(CopyBySample(MemoHtml.Lines[i], 'image"><a href="','" title="'));
          Img2:=Trim(CopyBySample(MemoHtml.Lines[i], '<img itemprop="image" src="','" title="'));
          if (Length(Img1)>0) and (Length(Img2)=0) then
            begin
            ParsedRow.images:=Img1;
            end;
          if (Length(Img1)=0) and (Length(Img2)>0) then
            begin
            ParsedRow.images:=Img2;
            end;
          if (Length(Img1)>0) and (Length(Img2)>0) then
            begin
            if Pos(WideString('800'), Img2)>0 then ParsedRow.images:=Img2;
            if Pos(WideString('800'), Img1)>0 then ParsedRow.images:=Img1;
            end;
          if (Length(ParsedRow.images)>0) then
            begin
            ParsedRow.images:=WideStringReplace(ParsedRow.images, 'https://automaslo.com/image/cache/data/', 'http://petrik.tk/files/',[rfReplaceAll]);
            ParsedRow.images:=WideStringReplace(ParsedRow.images, '../image/cache/data/', 'http://petrik.tk/files/',[rfReplaceAll]);
            if LastDelimiter('/',ParsedRow.images)>0
              then ParsedRow.images:=Copy(ParsedRow.images,LastDelimiter('/',ParsedRow.images)+1, length(ParsedRow.images));

            //Сделана заготовка - сформирован полный путь. Но заготовка не используется, берём только короткое имя
            // Необходимо сделать руками переименования:
            // Удаляем 800x800 из имени
            // 50x50 заменить на 100x100
            // 267x267 заменить на 240x240
            // 350x350 заменить на 500x500
            if (Pos(WideString('-800x800'),ParsedRow.images)>0)
              then ParsedRow.images:=StringReplace(ParsedRow.images,WideString('-800x800'),'',[rfReplaceAll]);
            end;
          end;

      if Pos('itemprop="desctiption">',MemoHtml.Lines[i])>0
        then
          begin
          Desc_Begin:=0;
          Desc_End:=0;
          for j:=0 to 50 do
            begin
            if Pos('<div class="left">',MemoHtml.Lines[i+j])>0 then Desc_Begin:=j;
            if Pos('<ul class="product-benefit">',MemoHtml.Lines[i+j])>0 then begin Desc_End:=j; break; end;
            end;
          SetLength(Description,0);
          Desc_len:=0;
          if (Desc_End>Desc_Begin) and not (Desc_begin+Desc_End=0) then
            begin
            Desc_Len:=Desc_End-Desc_Begin+1;
            SetLength(Description,Desc_Len);
            for j := 0 to Desc_Len-1 do
              begin
              Description[j]:=Trim(MemoHtml.Lines[i+Desc_Begin+j]);
              end;
            end;
          Annotation:=Trim(MemoHtml.Lines[i+Desc_Begin+0])+Trim(MemoHtml.Lines[i+Desc_Begin+1]);
          Annotation:=WideStringReplace(Annotation, '&amp;nbsp', '',[rfReplaceAll]);
          Annotation:=WideStringReplace(Annotation, '&nbsp;', '',[rfReplaceAll]);
          Annotation:=WideStringReplace(Annotation, '&amp;', '',[rfReplaceAll]);
          Annotation:=WideStringReplace(Annotation, '&ndash;', '',[rfReplaceAll]);
          //MemoParsed.Lines.Add('Description="'+IntToStr(Desc_Begin)+'!'+IntToStr(Desc_End));
//          for j := 0 to Desc_Len-1 do
//            if (Pos(WideString('<div'),Description[j])>0) or (Pos(WideString('</div>'), Description[j])>0) then Description[j]:='';
          for j := 0 to Desc_Len-1 do
            if (Pos(WideString('</div>'), Description[j])>0) then Description[j]:='';
          Descr:='';
          for j := 0 to Desc_Len-1 do
            if not (Description[j]='') then Descr:=Descr+Description[j];
          Descr:=WideStringReplace(Descr, chr(13)+chr(10), '',[rfReplaceAll]);
          Descr:=WideStringReplace(Descr, '&nbsp', ' ',[rfReplaceAll]);
          if (Pos(WideString('<iframe'),Descr)>0) then IFrame_begin:=Pos(WideString('<iframe'),Descr) else IFrame_begin:=0;
          if (Pos(WideString('</iframe>'),Descr)>0) then IFrame_end:=Pos(WideString('</iframe>'),Descr) else IFrame_end:=0;
          if (IFrame_begin>0) and (IFrame_end>0) and (IFrame_begin<IFrame_end)
            then
            begin
            Descr:=Copy(Descr, 1, IFrame_begin-1)+Copy(Descr, IFrame_end+length('</iframe>'), Length(Descr));
            end;

          ParsedRow.Description:=trim(WideStringReplace(Descr, chr(9), ' ',[rfReplaceAll]));
          end;  // Pos('itemprop="desctiption">',MemoHtml.Lines[i])>0
//      ParsedRow.Category:='Авто масла/Моторные/Легковые, Авто масла/Моторные/Микроавтобусы';
      ParsedRow.Category:='';
      ParsedRow.Annotation:=Annotation_text_header+Annotation+Annotation_text_footer;
      ParsedRow.Page_Description:='';
      ParsedRow.Item:=Uppercase(WideStringReplace(HeadingTitle, 'с', 'C',[rfReplaceAll]));
      ParsedRow.Variant:=LowerCase(WideStringReplace(litraz, '.', '',[rfReplaceAll]));
      ParsedRow.Position:=0;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 1л') then ParsedRow.Position:=1;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 2л') then ParsedRow.Position:=2;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 4л') then ParsedRow.Position:=4;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 5л') then ParsedRow.Position:=5;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 20л') then ParsedRow.Position:=20;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 60л') then ParsedRow.Position:=60;
      if Uppercase(ParsedRow.Variant)= UpperCase('Объем 208л') then ParsedRow.Position:=208;
      ParsedRow.Visible:='1';
      end;   //MemoHtml.Lines.Count-1
  OutputStr:='';
  with ParsedRow do
    begin
    OutputStr:=OutputStr+SaveFirstTab(ParsedRow.Category); // 1 Категория
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.Item);     // 2 Товар
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 3 Поисковые метки
    OutputStr:=OutputStr+SavePlainTab('0.01');    // 4 Цена
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);   // 5 Цена оптовая
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);   // 6 Адрес - ссылка на страницу
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.Visible);  // 7 Видимый - активный на сайте
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);   // 8 Рекомендуемый  - оставить пустым
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 9 Бренд - проверить поле
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.variant);  // 10 Вариант, литраж - Объем 1л
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);   // 11 Старая цена
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 12 Артикул - не проставляем, возможно поменяется
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 13 Склад  - пусто
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);;    // 14 Заголовок страницы = товар, вычисляется на сайте
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 15 Ключевые слова
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Page_description);    // 16 Описание страницы - Первое предложение из описания, формат текстовый
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.Annotation);       // 17 Аннотация, краткое описание - HTML, Описание плюс 2 картинки
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.Description); // 18 Описание
    OutputStr:=OutputStr+SavePlainTab(lowercase(ParsedRow.Vendor)+'/'+ParsedRow.images);   // 19 Изображения
    OutputStr:=OutputStr+SavePlainTab(Uppercase(ParsedRow.Vendor));   // 20 Производитель
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 21 Емкость
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.Oil_type);    // 22 Тип масла
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 23 Тип двигателя
    OutputStr:=OutputStr+SaveQuotedTab(ParsedRow.SAE);      // 24 SAE (Вязкость)
    OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);    // 25 Применение
    for I := 26 to Header_Size do OutputStr:=OutputStr+SavePlainTab(ParsedRow.Empty);
    end;
  MemoCodes.Lines.Add(OutputStr);
  OutputStr:='';
  with ParsedRow do
    begin
    // delete  FROM s_images WHERE product_id IN (SELECT id AS product_id FROM s_products WHERE UPPER(name) = UPPER(
    // "ARAL SUPERSYNTH 0W-40") AND position = 1);
    OutputStr:='DELETE FROM s_images WHERE product_id IN (SELECT id AS product_id FROM s_products WHERE UPPER(name) = UPPER("'+ParsedRow.Item+'") AND POSITION = '+IntToStr(ParsedRow.Position)+');';
    end;
  MemoSQL.Lines.Add(OutputStr);
  OutputStr:='';
  with ParsedRow do
    begin
    // INSERT INTO s_images  (name, product_id, category_id, filename, position, product_id_old)
    // SELECT CONCAT("ARAL SUPERSYNTH 0W-40"," Объем 4л") AS name, id AS product_id, 0 AS category_id,
    // "Aral_SuperSynth_0W40_1L.jpg" AS filename, 1 as position, 0 AS product_id_old
    // FROM s_products WHERE UPPER(name) = UPPER("ARAL SUPERSYNTH 0W-40");
    OutputStr:='INSERT INTO s_images (name, product_id, category_id, filename, position, product_id_old) SELECT CONCAT("'
    + ParsedRow.Item+'"," ", "'+ParsedRow.variant+'") AS name, id AS product_id, 0 AS category_id,"'
    + lowercase(ParsedRow.Vendor)+'/'+ParsedRow.images+'" AS filename,'+IntToStr(Position)+' as Position, 0 AS product_id_old FROM s_products WHERE UPPER(name) = UPPER("'+ ParsedRow.Item +'");';
    end;
  MemoSQL.Lines.Add(OutputStr);
  PB.StepIt;
  until Findnext(sr)<>0;
  FindClose(sr);
  end;
PB.Position:=PB.Max;
DirName:=trim(WideStringReplace(ParsedRow.Vendor,'"', '',[rfReplaceAll]));
if length(DirName)=0 then DirName:='empty';
ExportedFile:=FilesDir+'\'+DirName+'.csv';
MemoHtml.Lines.Add(ExportedFile);
try
if FileExists(ExportedFile) then DeleteFile(ExportedFile);
  except on E: Exception do
  begin
  ShowMessage('Файл открыть в другой программе, не могу удалить - '+ExportedFile);
  exit;
  end;
end;
MemoCodes.Lines.SaveToFile(ExportedFile, TEncoding.Utf8);
//ExportedFile:=FilesDir+'\'+DirName+'_delete.sql';
//MemoHTML.Lines.Add(ExportedFile);
//try
//if FileExists(ExportedFile) then DeleteFile(ExportedFile);
//  except on E: Exception do
//  begin
//  ShowMessage('Файл открыть в другой программе, не могу удалить - '+ExportedFile);
//  exit;
//  end;
//end;
//MemoSQLDelete.Lines.SaveToFile(ExportedFile, TEncoding.Utf8);
ExportedFile:=FilesDir+'\'+DirName+'_insert.sql';
MemoHTML.Lines.Add(ExportedFile);
try
if FileExists(ExportedFile) then DeleteFile(ExportedFile);
  except on E: Exception do
  begin
  ShowMessage('Файл открыть в другой программе, не могу удалить - '+ExportedFile);
  exit;
  end;
end;
MemoSQL.Lines.Add('COMMIT;');
MemoSQL.Lines.SaveToFile(ExportedFile, TEncoding.Utf8);
end;

procedure TFormAutoMaslo.BitBtnSaveClick(Sender: TObject);
begin
if not SaveDialog1.Execute then exit;
MemoCodes.Lines.SaveToFile(SaveDialog1.FileName, TEncoding.ANSI);
end;

function TFormAutoMaslo.CopyBySample(const SearchStr, SampleBegin, SampleEnd: WideString): WideString;
var Pos1, Pos2:integer;
begin
Pos1:=Pos(SampleBegin, SearchStr);
Pos2:=Pos(SampleEnd, SearchStr, Pos1);
if (Pos1>0) and (Pos2>0)
  then Result:=Copy(SearchStr,Pos1+length(SampleBegin), Pos2-Pos1-length(SampleBegin))
  else Result:='';
end;

procedure TFormAutoMaslo.FormCreate(Sender: TObject);
begin
BitBtnSave.Enabled:=false;
end;

function TFormAutoMaslo.ReplaceCapitals(const Str: Widestring): Widestring;
var Brandname:WideString;
where, i:integer;
begin
Result:=Str;
for I := 1 to 9 do
  begin
  BrandName:=Brands[i];
  if  (pos(BrandName,WideString(UpperCase(Str)))=0)
  and (pos(BrandName,WideString(Str))>0)
    then
    begin
    Where:=pos(BrandName,WideString(UpperCase(Str)));
    Result:=Copy(Str,1, where)
            +Copy(str, where+1, length(BrandName))
            +Copy(str, where+length(BrandName)+1,length(Str));
    end;
  end;
end;

function TFormAutoMaslo.SavePlainTab(const Str: widestring):WideString;
begin
Result:=FileSeparator+WideStringReplace(Str, FileSeparator, ' ',[rfReplaceAll]);
end;

function TFormAutoMaslo.SaveQuotedTab(const Str: widestring):WideString;
begin
Result:=FileSeparator+FileQuotes+WideStringReplace(Str, FileSeparator, ' ',[rfReplaceAll])+FileQuotes;
end;

function TFormAutoMaslo.SaveFirstTab(const Str: widestring):WideString;
begin
Result:=FileQuotes+WideStringReplace(Str, FileSeparator, ' ',[rfReplaceAll])+FileQuotes;
end;

end.
